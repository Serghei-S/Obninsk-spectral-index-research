import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../contexts/AuthContext'
import api from '../utils/api'
import Header from './Header'
import TimeSeriesWidget from './TimeSeriesWidget'
import FieldStatsWidget from './FieldStatsWidget'
import LatestNdviMapWidget from './LatestNdviMapWidget'
import './DashboardPage.css'

function DashboardPage() {
  const { user } = useAuth()
  const navigate = useNavigate()
  const [dashboardItems, setDashboardItems] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    loadDashboardItems()
  }, [])

  const loadDashboardItems = async () => {
    setIsLoading(true)
    setError(null)

    try {
      const response = await api.get('/api/v1/dashboard/items')
      setDashboardItems(response.data)
    } catch (err) {
      console.error('Error loading dashboard items:', err)
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞')
    } finally {
      setIsLoading(false)
    }
  }

  const handleDeleteItem = async (itemId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?')) {
      return
    }

    try {
      await api.delete(`/api/v1/dashboard/items/${itemId}`)
      setDashboardItems(dashboardItems.filter(item => item.id !== itemId))
    } catch (err) {
      console.error('Error deleting dashboard item:', err)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞')
    }
  }

  const renderWidget = (item) => {
    const key = `widget-${item.id}`

    switch (item.item_type) {
      case 'time_series_chart':
        return <TimeSeriesWidget key={key} item={item} onDelete={handleDeleteItem} />
      case 'field_stats':
        return <FieldStatsWidget key={key} item={item} onDelete={handleDeleteItem} />
      case 'latest_ndvi_map':
        return <LatestNdviMapWidget key={key} item={item} onDelete={handleDeleteItem} />
      default:
        return (
          <div key={key} className="dashboard-widget">
            <div className="widget-header">
              <h3 className="widget-title">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–∏–¥–∂–µ—Ç–∞</h3>
              <button 
                className="widget-btn widget-btn-delete" 
                onClick={() => handleDeleteItem(item.id)}
              >
                üóëÔ∏è
              </button>
            </div>
          </div>
        )
    }
  }

  if (!user) {
    return (
      <div className="dashboard-page">
        <div className="dashboard-container">
          <div className="auth-required">
            <h2>üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞—à–±–æ—Ä–¥—É.</p>
            <button className="btn btn-primary" onClick={() => navigate('/auth')}>
              –í–æ–π—Ç–∏
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <>
      <Header />
      <div className="dashboard-page">
        <div className="dashboard-container">
        <div className="dashboard-header">
          <div className="dashboard-title-section">
            <h1>üìä –ú–æ–π –î–∞—à–±–æ—Ä–¥</h1>
            <p className="dashboard-subtitle">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <strong>{user.email}</strong>!
            </p>
          </div>
          <div className="dashboard-actions">
            <button 
              className="btn btn-secondary" 
              onClick={loadDashboardItems}
              disabled={isLoading}
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </button>
            <button 
              className="btn btn-primary" 
              onClick={() => navigate('/')}
            >
              üó∫Ô∏è –ö –∫–∞—Ä—Ç–µ
            </button>
          </div>
        </div>

        {isLoading && (
          <div className="dashboard-loading">
            <div className="spinner-large"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞...</p>
          </div>
        )}

        {error && !isLoading && (
          <div className="dashboard-error">
            <h3>‚ùå –û—à–∏–±–∫–∞</h3>
            <p>{error}</p>
            <button className="btn btn-primary" onClick={loadDashboardItems}>
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}

        {!isLoading && !error && dashboardItems.length === 0 && (
          <div className="dashboard-empty">
            <div className="empty-state">
              <h2>üì≠ –î–∞—à–±–æ—Ä–¥ –ø—É—Å—Ç</h2>
              <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.</p>
              <div className="empty-instructions">
                <h3>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–∂–µ—Ç—ã –Ω–∞ –¥–∞—à–±–æ—Ä–¥:</h3>
                <ol>
                  <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç—ã</li>
                  <li>–ù–∞—Ä–∏—Å—É–π—Ç–µ –ø–æ–ª–µ –Ω–∞ –∫–∞—Ä—Ç–µ</li>
                  <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–µ"</li>
                  <li>–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ (NDVI –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥)</li>
                  <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –¥–∞—à–±–æ—Ä–¥"</li>
                </ol>
              </div>
              <button className="btn btn-primary btn-large" onClick={() => navigate('/')}>
                üó∫Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ
              </button>
            </div>
          </div>
        )}

        {!isLoading && !error && dashboardItems.length > 0 && (
          <div className="dashboard-grid">
            {dashboardItems.map(renderWidget)}
          </div>
        )}
      </div>
    </div>
    </>
  )
}

export default DashboardPage

