"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
"""
import asyncio
import sys
from datetime import datetime
from services.sentinel_service import SentinelService
from api.schemas import Geometry

# –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è (–Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ–ª–µ –≤ –ú–æ–ª–¥–æ–≤–µ)
test_geometry = Geometry(
    type="Polygon",
    coordinates=[[
        [28.8, 47.0],
        [28.81, 47.0],
        [28.81, 47.01],
        [28.8, 47.01],
        [28.8, 47.0]
    ]]
)

async def test_single_date():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –æ–¥–Ω—É –¥–∞—Ç—É"""
    print("\n" + "="*60)
    print("TEST: Getting Sentinel-2 data for single date")
    print("="*60)
    
    sentinel = SentinelService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ credentials –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    if sentinel.use_mock:
        print("‚ùå –û–®–ò–ë–ö–ê: Sentinel Hub credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SENTINEL_CLIENT_ID –∏ SENTINEL_CLIENT_SECRET –≤ config.py")
        return False
    
    print(f"‚úÖ Credentials –Ω–∞–π–¥–µ–Ω—ã")
    print(f"   Client ID: {sentinel.client_id[:20]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    date_range = ["2025-09-01", "2025-09-15"]
    
    print(f"\nüìÖ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: {date_range[0]} - {date_range[1]}")
    print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥)")
    
    try:
        data = await sentinel.fetch_data(test_geometry, date_range)
        
        if data:
            print("\n‚úÖ –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print(f"   –ö–∞–Ω–∞–ª—ã: {list(data.keys())}")
            print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {data['red'].shape}")
            print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data['red'].dtype}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω NIR: {data['nir'].min():.3f} - {data['nir'].max():.3f}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω Red: {data['red'].min():.3f} - {data['red'].max():.3f}")
            
            # –í—ã—á–∏—Å–ª–∏–º –ø—Ä–æ—Å—Ç–æ–π NDVI
            import numpy as np
            nir = data['nir']
            red = data['red']
            
            # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            denominator = nir + red
            ndvi = np.where(
                denominator != 0,
                (nir - red) / denominator,
                0
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –æ–±–ª–∞–∫–æ–≤ (SCL)
            scl = data['scl']
            invalid_mask = np.isin(scl, [0, 1, 2, 3, 8, 9, 10])
            ndvi[invalid_mask] = np.nan
            
            valid_ndvi = ndvi[~np.isnan(ndvi)]
            
            if len(valid_ndvi) > 0:
                print(f"\nüìä NDVI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   –°—Ä–µ–¥–Ω–µ–µ: {np.mean(valid_ndvi):.3f}")
                print(f"   –ú–∏–Ω: {np.min(valid_ndvi):.3f}")
                print(f"   –ú–∞–∫—Å: {np.max(valid_ndvi):.3f}")
                print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {len(valid_ndvi)} –∏–∑ {ndvi.size}")
            else:
                print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å—è –æ–±–ª–∞—Å—Ç—å –ø–æ–∫—Ä—ã—Ç–∞ –æ–±–ª–∞–∫–∞–º–∏)")
                print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å")
            
            return True
        else:
            print("\n‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –í—ã—Å–æ–∫–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å")
            print("   - –ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏")
            print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("   - –†–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
            print("   - –í—ã–±—Ä–∞—Ç—å –ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ (–∏—é–Ω—å-–∞–≤–≥—É—Å—Ç)")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*60)
    print(" "*15 + "TEST SENTINEL-2 API")
    print("="*60)
    
    success = await test_single_date()
    
    print("\n" + "="*60)
    if success:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("\nüìñ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
        print("   2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("   3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –Ω–∞ –∫–∞—Ä—Ç–µ")
        print("   4. –ù–∞–∂–º–∏—Ç–µ 'üìä –û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏'")
        print("   5. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: —Å–µ–Ω—Ç—è–±—Ä—å-–æ–∫—Ç—è–±—Ä—å 2025")
        print("   6. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã: NDVI + EVI")
        print("   7. –ù–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É'")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ credentials –≤ config.py")
        print("   2. –ó–∞–ø—É—â–µ–Ω –ª–∏ backend —Å–µ—Ä–≤–µ—Ä")
        print("   3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ rasterio (python -c 'import rasterio')")
        print("   4. –ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    print("="*60 + "\n")

if __name__ == "__main__":
    asyncio.run(main())

